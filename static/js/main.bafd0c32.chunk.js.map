{"version":3,"sources":["components/HomeLayout/index.js","routers/Home.js","routers/FoodOrder.js","components/Login/index.js","components/UserManagement/index.js","routers/UserManagement.js","router.js","App.js","serviceWorker.js","index.js"],"names":["HomeLayout","className","Component","Home","FoodOrder","schema","yup","userName","required","password","override","css","LoginComponent","state","loading","loginSuccess","loginClicked","this","props","size","color","id","src","alt","validationSchema","initialValues","onSubmit","setState","setTimeout","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","Form","noValidate","onKeyDown","e","key","Control","type","placeholder","name","value","onChange","href","UserManagement","SetupRouter","AuthButton","to","exact","path","LoginPage","PrivateRoute","fakeAuth","isAuthenticated","authenticate","cb","signout","history","useHistory","onClick","push","children","rest","render","location","pathname","from","useLocation","Login","replace","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bafd0c32.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass HomeLayout extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <a> This is a Header </a>\n            </div>\n        );\n    }\n}\n\nexport default HomeLayout;","import React, {Component} from 'react';\nimport HomeLayout from \"../components/HomeLayout\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <HomeLayout />\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\n\nclass FoodOrder extends Component {\n    render() {\n        //console.log('id', this.props.match.params.id)\n        return (\n            <div>\n                Food Order\n            </div>\n        );\n    }\n}\n\nexport default FoodOrder;","import React, {Component, useState} from 'react';\nimport {Button, Col, Container, Form, InputGroup, Row} from \"react-bootstrap\";\nimport {Formik} from \"formik\";\nimport * as yup from 'yup';\nimport { css } from \"@emotion/core\";\nimport {HashLoader} from \"react-spinners\";\n\nconst schema = yup.object({\n    userName: yup.string().required(),\n    password: yup.string().required(),\n});\n\n// Can be a string as well. Need to ensure each key-value pair ends with ;\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nclass LoginComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loading: true,\n            loginSuccess: false,\n        }\n    }\n\n    render() {\n        const { loginClicked } = this.props;\n        const { loginSuccess } = this.state;\n        return ( loginSuccess ?\n            (<HashLoader\n                css={override}\n                size={50}\n                color={\"red\"}\n                loading={this.state.loginSuccess}\n            /> ) :\n            <div className=\"login-panel\">\n                <div className=\"wrapper fadeInDown\">\n                    <div id=\"formContent\">\n                        <div className=\"fadeIn first\">\n                            <img src=\"https://www.b-cube.in/wp-content/uploads/2014/05/aditya-300x177.jpg\" id=\"icon\"\n                                 alt=\"User Icon\"/>\n                            <h1>Aditya News</h1>\n                        </div>\n\n                        <Formik\n                            validationSchema={schema}\n                            initialValues={{\n                                userName: 'Mark',\n                                password: 'Otto',\n                            }}\n                            onSubmit={() => {\n                                this.setState({\n                                    loginSuccess: true,\n                                }, () => {\n                                    setTimeout(\n                                        () => {\n                                            loginClicked();\n                                        },\n                                        3000\n                                    );\n                                })\n                            }}\n                        >\n                            {({\n                                  handleSubmit,\n                                  handleChange,\n                                  handleBlur,\n                                  values,\n                                  touched,\n                                  isValid,\n                                  errors,\n                              }) => (\n                                <Form noValidate\n                                      onSubmit={handleSubmit}\n                                      onKeyDown={(e) => {\n                                          if (e.key === 'Enter') {\n                                              handleSubmit();\n                                          }\n                                      }}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        className=\"fadeIn second\"\n                                        placeholder=\"Tên đăng nhập\"\n                                        name=\"userName\"\n                                        value={values.userName}\n                                        onChange={handleChange}\n                                        isValid={touched.userName && !errors.userName}/>\n                                    <Form.Control\n                                        id=\"password\"\n                                        className=\"fadeIn third\"\n                                        placeholder=\"Mật khẩu\"\n                                        type=\"password\"\n                                        name=\"password\"\n                                        value={values.password}\n                                        onChange={handleChange}\n                                        isValid={touched.password && !errors.password}/>\n                                    <input type=\"submit\" className=\"fadeIn fourth\" value=\"Log In\"/>\n                                </Form>\n                            )}\n                        </Formik>\n                        <div id=\"formFooter\">\n                            <a className=\"underlineHover\" href=\"#\">Go to the Site</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LoginComponent;","import React, {Component} from 'react';\n\nclass UserManagement extends Component {\n    render() {\n        return (\n            <div className=\"UserManagement\">\n                <a> This is a UserManagement Page </a>\n            </div>\n        );\n    }\n}\n\nexport default UserManagement;","import React, {Component} from 'react';\nimport UserManagement from \"../components/UserManagement\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <UserManagement />\n        );\n    }\n}\n\nexport default Home;","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useHistory,\n    useLocation,\n    Redirect\n} from \"react-router-dom\";\nimport Home from \"./routers/Home\";\nimport FoodOrder from \"./routers/FoodOrder\";\nimport LoginComponent from \"./components/Login\";\nimport UserManagement from \"./routers/UserManagement\";\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function SetupRouter() {\n    return (\n        <Router>\n            <div>\n                <AuthButton />\n\n                <ul>\n                    <li>\n                        <Link to=\"/order-online/:id\">Public Page</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/user-manage\">Protected Page</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/login\">Protected Page</Link>\n                    </li>\n                </ul>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home />\n                    </Route>\n                    <Route path=\"/login\">\n                        <LoginPage />\n                    </Route>\n                    <Route path=\"/order-online\">\n                        <FoodOrder />\n                    </Route>\n                    <PrivateRoute path=\"/user-manage\">\n                        <UserManagement />\n                    </PrivateRoute>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nconst fakeAuth = {\n    isAuthenticated: false,\n    authenticate(cb) {\n        fakeAuth.isAuthenticated = true;\n        setTimeout(cb, 100); // fake async\n    },\n    signout(cb) {\n        fakeAuth.isAuthenticated = false;\n        setTimeout(cb, 100);\n    }\n};\n\nfunction AuthButton() {\n    let history = useHistory();\n\n    return fakeAuth.isAuthenticated ? (\n        <p>\n            Welcome!{\" \"}\n            <button\n                onClick={() => {\n                    fakeAuth.signout(() => history.push(\"/\"));\n                }}\n            >\n                Sign out\n            </button>\n        </p>\n    ) : (\n        <p>You are not logged in.</p>\n    );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={({location}) =>\n                fakeAuth.isAuthenticated ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: {from: location}\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nfunction LoginPage() {\n    let history = useHistory();\n    let location = useLocation();\n\n    let { from } = location.state || { from: { pathname: \"/\" } };\n    let login = () => {\n        fakeAuth.authenticate(() => {\n            history.replace(from);\n        });\n    };\n\n    return (\n        <div>\n            <p>You must log in to view the page at {from.pathname}</p>\n            <LoginComponent loginClicked={login}/>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport SetupRouter from \"./router\";\n\nfunction App() {\n    return (\n        <SetupRouter />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"./styles/bundle.css\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}